#!/usr/bin/env python3

import socket
import re
import sys
import ssl

# Get the first link from the page
def get_first_link(page):
    first_link = page.find('<a href=')
    if first_link == -1:
        return None,0
    start_pos = page.find('"', first_link)
    end_pos = page.find('"', start_pos + 1)
    url = page[start_pos + 1: end_pos]
    return url, end_pos


def crawler(my_socket, session_id, csrf_val, home_page):

    visited_URL = ["http://khoury.northeastern.edu", "mailto:systems-stt-admin@zimbra.ccs.neu.edu", "/accounts/logout/", "/"]
    unvisited_URL = [home_page]
    secret_flag_count = 0

    # Run until unvisited_URL is empty or we collected all 5 flags
    while unvisited_URL and secret_flag_count < 5:
        page = unvisited_URL.pop()

        if page not in visited_URL:
            get_content_msg = "GET " + page + " HTTP/1.1\nHost: project2.5700.network\nConnection: keep-alive\nCookie: csrftoken=" + csrf_val + "; sessionid=" + session_id + "\r\n\r\n"
            my_socket.sendall(get_content_msg.encode())
            content = my_socket.recv(16384).decode()

            start_pos = content.find("sessionid=")
            if start_pos != -1:
                space_pos = content.find(" ", start_pos + 1)
                session_id =  content[start_pos+10:space_pos-1]

            # Find using regex format
            status = re.findall(r"\D(\d{3})\D", content)

            # Deals with each error separately
            if status[0] == '500' or status[0] == '503':
                new_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                new_wrap_socket = ssl.wrap_socket(new_socket)
                try:
                    new_wrap_socket.connect(("project2.5700.network", 443))
                except ConnectionRefusedError:
                    another_new_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    another_new_socket = ssl.wrap_socket(another_new_socket)
                    my_socket = another_new_socket
                    my_socket.connect(("project2.5700.network", 443))
                my_socket = new_wrap_socket

            if status[0] == '301':
                location_header_pos = content.find("Location")
                profile_num_pos = content.find("/fakebook/", location_header_pos + 1)
                end_space_pos = content.find(" ", profile_num_pos)
                new_path = content[profile_num_pos : end_space_pos]
                get_msg = "GET " + new_path + " HTTP/1.1\nHost: project2.5700.network\nConnection: keep-alive\nCookie: csrftoken=" + csrf_val + "; sessionid=" + session_id + "\r\n\r\n"
                my_socket.sendall(get_msg.encode())
                new_page = my_socket.recv(16384).decode()

            if status[0] == '403' or status[0] == '404':
                visited_URL.append(page)


            if status[0] != '403' or status[0] != '404':
                visited_URL.append(page)

                # If flag found, print it
                secret_flag_pos = content.find("FLAG")
                if secret_flag_pos >= 0:
                    secret_flag = content[secret_flag_pos + 6: secret_flag_pos + 70]
                    secret_flag_count += 1
                    print(secret_flag)

                # Find all links in a given page
                found_links = []
                while True:
                    retrieved_url, end_pos = get_first_link(content)
                    if retrieved_url:
                        found_links.append(retrieved_url)
                        content = content[end_pos:]
                    else:
                        break

                for link in found_links:
                    if link not in visited_URL and link not in unvisited_URL:
                        unvisited_URL.append(link)


def main(argv):
    # Establish TSL connection
    my_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # Default wrapper
    wrap_socket = ssl.wrap_socket(my_socket)

    # Get username and password from cmd line
    username = sys.argv[1]
    password = sys.argv[2]

    # Host and port information for secure connection
    host =  "project2.5700.network"
    port = 443

    # Connect with server
    wrap_socket.connect((host, port))

    # Send a GET request to the login browser to get the HTML content
    msg_get_html = "GET /accounts/login/ HTTP/1.1\nHost: project2.5700.network\r\n\r\n"
    wrap_socket.sendall(msg_get_html.encode())
    login_page = wrap_socket.recv(16384) # what is this number???
    login_page = login_page.decode()

    csrf_token_position = login_page.find('csrfmiddlewaretoken')
    csrf_token = login_page.find('value', csrf_token_position + 1)
    # Extract the actual value of the csrf token
    csrf_value = login_page[csrf_token + 7 : csrf_token + 71]

    # Send the HTTP Post message by specifying the required headers and pass in body content
    msg_POST = "POST /accounts/login/ HTTP/1.1\nHost: project2.5700.network\nContent-Length: 150\nConnection: keep-alive\nContent-Type: application/x-www-form-urlencoded\nCookie: csrftoken=" + csrf_value + "\r\n\r\nusername=" + username + "&password=" + password + "&csrfmiddlewaretoken="+csrf_value + "&next=%2Ffakebook%2F\r\n"
    wrap_socket.sendall(msg_POST.encode())
    successful_login_page = wrap_socket.recv(16384)
    successful_login_page = successful_login_page.decode()
    start_pos = successful_login_page.find("sessionid=")
    space_pos = successful_login_page.find(" ", start_pos + 1)
    # Find the sessionid in the response
    session_id =  successful_login_page[start_pos+10:space_pos-1]
    crawler(wrap_socket, session_id, csrf_value, "/fakebook/")


if __name__ == "__main__":
    main(sys.argv[0:])








